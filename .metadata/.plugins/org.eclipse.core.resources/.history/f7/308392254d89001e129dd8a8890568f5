import org.junit.jupiter.api.Test;
import java.io.IOException;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import org.junit.jupiter.api.Assertions;

public class BackendDeveloperTests {

  /*
   * Tests backend properly builds directed graph based on campus.dot
   */
  @Test
  public void testReadData() {
    Backend backend = new Backend();
    try {
      backend.readData("src/campus.dot");
    } catch (IOException e) {
      e.printStackTrace();
      Assertions.fail();
    }

    // Verify that the edges leaving Memorial Union matches the arithmetic count in the dot file
    Assertions.assertFalse(!(backend.graph.nodes.get("Memorial Union").edgesLeaving.size() == 5));

    // Verify that all edges were built using Memorial Union as a test location
    Assertions.assertFalse(!(backend.graph.containsEdge("Memorial Union", "Science Hall")));

    Assertions.assertFalse(!(backend.graph.containsEdge("Memorial Union", "Brat Stand")));

    Assertions.assertFalse(!(backend.graph.containsEdge("Memorial Union", "Helen C White Hall")));

    Assertions.assertFalse(!(backend.graph.containsEdge("Memorial Union", "Radio Hall")));

    Assertions.assertFalse(
        !(backend.graph.containsEdge("Memorial Union", "Wisconsin State Historical Society")));

  }


  /*
   * Expects shortestPath to return correct results, will use simple three node path in DOT file
   * All three methods in ShortestPath are expected to return correct reuslt using this node path
   */
  @Test
  public void testShortestPath() {
    Backend backend = new Backend();
    try {
      backend.readData("src/campus.dot");
    } catch (IOException e) {
      e.printStackTrace();
      Assertions.fail();
    }
    
    //test getPath() method to expected list
    List<String> expected = new LinkedList<String>();
    expected.add("Memorial Union");
    expected.add("Radio Hall");
    expected.add("North Hall");
    List<String> result = backend.findShortestPath("Memorial Union", "North Hall").getPath();
    for (String node : result) {
      if (!expected.contains(node)) {
        Assertions.fail();
      }
    }
    
    //test getWalkTimes() method to expected list
    List<Double> expectedTime = new LinkedList<Double>();
    expectedTime.add(176.7);
    expectedTime.add(367.1);
    List<Double> time = backend.findShortestPath("Memorial Union", "North Hall").getWalkTimes();
    for (double node : time) {
      if (!expectedTime.contains(node)) {
        Assertions.fail();
      }
    }
    
    //test getTotalTime() method to expected total time
    Assertions.assertEquals(367.1 , 
        backend.findShortestPath("Memorial Union", "North Hall").getTotalTime());
  }

  /*
   * Expects NoSuchElementException when inputting invalid inputs into findShortestPath()
   */
  @Test
  public void testInvalidShortestPath() {
    Backend backend = new Backend();

    // Test for start node being null
    Assertions.assertThrows(NoSuchElementException.class, () -> {
      backend.readData("src/campus.dot");
      backend.findShortestPath(null, "Plant Sciences");
    });

    // Test for destination node being null
    Assertions.assertThrows(NoSuchElementException.class, () -> {
      backend.readData("src/campus.dot");
      backend.findShortestPath("Memorial Union", null);
    });
    // Test for destination node being null
    Assertions.assertThrows(NoSuchElementException.class, () -> {
      backend.readData("src/campus.dot");
      backend.findShortestPath("Memorial Union", null);
    });

    // Test for start node not in graph
    Assertions.assertThrows(NoSuchElementException.class, () -> {
      backend.readData("src/campus.dot");
      backend.findShortestPath("Nitty Gritty", "Plant Sciences");
    });

    // Test for destination node not in graph
    Assertions.assertThrows(NoSuchElementException.class, () -> {
      backend.readData("src/campus.dot");
      backend.findShortestPath("Memorial Union", "Nitty Gritty");
    });
  }

  /*
   * Tests backend properly produces a string of all data in graph
   */
  @Test
  public void testDataSet() {
    Backend backend = new Backend();
    try {
      backend.readData("src/campus.dot");
      Assertions.assertTrue(backend.getGraphStats().contains("Memorial Hall"));
    } catch (IOException e) {
      e.printStackTrace();
      Assertions.fail();
    }

  }

  /*
   * Expects that program returns NoSuchElementException upon
   */
  @Test
  public void testInvalidFilePath() {
    Backend backend = new Backend();
    try {
      backend.readData("src/campus.dot");
    } catch (IOException e) {
      e.printStackTrace();
      Assertions.assertTrue(true);
    }
    Assertions.fail();
  }

}
