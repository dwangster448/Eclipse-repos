import java.util.*;
import hw2.Node;

public class thehw2 {

  public int instances;
  public static int input;


  public static class Node {
    public String data;
    private LinkedList<String>[] adjacencyList;


    @SuppressWarnings("unchecked")
    public Node(String data, int vertices) {
      this.data = data;
      for (int i = 0; i < vertices; i++) {
        adjacencyList[i] = new LinkedList<>();
      }
    }

  }



  public void addEdge(int source, int destination) {
    adjacencyList[source].add(destination);
  }

  public static void DFS(int vertices, Scanner scanner) {
    
    
    
    String node;
    for (int i = 0; i < vertices; i++) {
      node = scanner.next();
      if (scanner.nextLine().length() > 0) {
        String line;
        line = scanner.nextLine();
        placeholder.neighbors = line.split("//s");
        for (int j = 0; j < placeholder.neighbors.length; j++) {
          queue.add(placeholder.neighbors[j].toString());
        }
      } else {
        
      }
    }
    // Create a stack for DFS
    Stack<Integer> stack = new Stack<>();

    // Mark all vertices as not visited
    boolean[] visited = new boolean[vertices];

    // Push the current source node
    stack.push(startVertex);

    while (!stack.isEmpty()) {
      // Pop a vertex from stack and print it
      int currentVertex = stack.pop();
      if (!visited[currentVertex]) {
        System.out.print(currentVertex + " ");
        visited[currentVertex] = true;
      }

      // Get all adjacent vertices of the popped vertex
      // If the adjacent vertex is not visited, push it to the stack
      for (int neighbor : adjacencyList[currentVertex]) {
        if (!visited[neighbor]) {
          stack.push(neighbor);
        }
      }
    }
  }

  public static void main(String[] args) {

    Scanner scanner = new Scanner(System.in);
    input = scanner.nextInt();

    if (scanner.hasNextInt()) {
      int instances = input;
      input = scanner.nextInt();
      for (int i = 0; i < instances; i++) {
        DFS(input, scanner);
      }
    } else {
      for (int j = 0; j < input; j++) {
        String line = scanner.nextLine();
      }
    }


    graph.addEdge(0, 1);
    graph.addEdge(0, 2);
    graph.addEdge(1, 3);
    graph.addEdge(2, 4);

    System.out.println("DFS starting from vertex 0:");
    graph.DFS(0);
  }
}
