public class RedBlackTree<T extends Comparable<T>> extends BinarySearchTree<T> implements SortedCollectionInterface<T> {

  
  protected static class RBTNode<T extends Node<T>> {
    public int blackHeight = 0;
    public RBTNode(T data) { super(data); }
    public RBTNode<T> getUp() { return (RBTNode<T>)this.up; }
    public RBTNode<T> getDownLeft() { return (RBTNode<T>)this.down[0]; }
    public RBTNode<T> getDownRight() { 
      return (RBTNode<T>)this.down[1]; }
  }
  
  //Resolves RBT red violations 
  protected void enforceRBTreePropertiesAfterInsert(Node<T> newNode) {
    
  }
  
  @Override
  public boolean insert(T key) throws NullPointerException{
      RBTNode<T> newNode = new RBTNode<>(key, Node.RED); // Create a new red node
      insertHelper(newNode); // Insert the new node using the helper method
      enforceRBTreePropertiesAfterInsert(newNode); // Enforce Red-Black Tree properties

      // After enforcing properties, set the root node to black
      if (newNode.getParent() == null) {
          newNode.setColor(Node.BLACK);
      }
  }
  
  public static void main(String[] args) {
    // TODO Auto-generated method stub

  }

  
  public static boolean test1() {
    //Create, insert Integers into empty tree
    
    BinarySearchTree<Integer> tester = new BinarySearchTree<Integer>(); 
    tester.insert(10);
    tester.insert(9);
    tester.insert(8);
    Node<Integer> ten = tester.root;
    Node<Integer> nine = ten.down[0];
    //call rotate method
    tester.rotate(nine, ten);
    //Test expected to actual
    if (!tester.toLevelOrderString().equals("[ 9, 8, 10 ]")) {
      System.out.println("After inserting 10, 9, 8 into an empty tree and rotating 9 and 10,"
          + " level order is not [ 9, 8, 10 ], but should be");
      return false;
    }
    return true;
  }

}
