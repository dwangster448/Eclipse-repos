import java.util.*;

public class GraphTraversal {
  
    public static void readData(int nodes, Scanner scanner) {
   // Create an adjacency list to represent the graph
      Map<Integer, List<Integer>> graph = new HashMap<>();
      for (int i = 1; i <= nodes; i++) {
          graph.put(i, new ArrayList<>());
      }

      // Read the connections and build the graph
      for (int i = 1; i <= nodes; i++) {
          while (scanner.hasNextInt()) {
              int neighbor = scanner.nextInt();
              graph.get(i).add(neighbor);
          }
      }

      // Perform DFS and print the result
      boolean[] visited = new boolean[nodes + 1];
      List<Integer> result = new ArrayList<>();
      for (int i = 1; i <= nodes; i++) {
          if (!visited[i]) {
              dfs(i, graph, visited, result);
          }
      }

      // Print the output
      for (int i : result) {
          System.out.print((char) ('A' + i - 1) + " ");
      }
      System.out.println();
    }
  
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Read the number of test cases
        int i = scanner.nextInt();
        
        if (scanner.hasNextInt()) {
          for (int t = 0; t < i; t++) {
            int testCases = scanner.nextInt();
            readData(testCases, scanner);
          }
        } else {
          readData(i, scanner);
        }
        
        

        
    }

    private static void dfs(String node, Map<String, List<String>> graph, List<String> result) {
      result.add(node);

      for (String neighbor : graph.getOrDefault(node, Collections.emptyList())) {
          if (!result.contains(neighbor)) {
              dfs(neighbor, graph, result);
          }
      }
  }
}
