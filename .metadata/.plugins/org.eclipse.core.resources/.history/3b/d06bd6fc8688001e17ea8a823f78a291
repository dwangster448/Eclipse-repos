import java.io.BufferedReader;
import java.io.FileReader;
import java.util.NoSuchElementException;
import java.util.regex.*;
import java.io.IOException;

public class Backend implements BackendInterface {

  private DijkstraGraph<String, Integer> graph;

  private ShortestPath path;

  public Backend() {
    graph = new DijkstraGraph<>(new PlaceholderMap<>());
  }

  @Override
  public boolean readData(String filePath) throws IOException {
    String line;
    // catch any expected exceptions during the reading of the file in backend
    try (BufferedReader reader = new BufferedReader(new FileReader(filePath));) {
      
      // Skip title description
      reader.readLine();
      while ((line = reader.readLine()) != null) {
        // Split the line into columns using a comma as the delimiter
        String data = line;
        
        // Define the regular expression pattern
        String regex = "\"([^\"]+)\"\\s*--\\s*\"([^\"]+)\"\\s*\\[seconds=([0-9.]+)\\];";
        Pattern pattern = Pattern.compile(regex);
        // Create a Matcher object 
        Matcher matcher = pattern.matcher(data);
        
        while (matcher.find()) {
          String location1 = matcher.group(1);
          String location2 = matcher.group(2);
          String time = matcher.group(3);

    
        }

        String node1 = matcher.group(1);
        String node2 = matcher.group(2);
        Integer seconds = Integer.parseInt(matcher.group(3));

        if (!graph.containsNode(node1)) {
          graph.insertNode(node1);

        }
        if (!graph.containsNode(node2)) {
          graph.insertNode(node2);

        }
        if (!graph.containsEdge(node1, node2)) {
          graph.insertEdge(node1, node2, seconds);

        }
        if (!graph.containsEdge(node2, node1)) {
          graph.insertEdge(node2, node1, seconds);

        }

      }
      reader.close();
      return true;
    } catch (IOException e) {
      throw new IOException("Invalid file path");
    }
  }

  @Override
  public ShortestPath findShortestPath(String start, String dest) throws NoSuchElementException {
    if (start != null && dest != null) {
      path = new ShortestPath(start, dest);
      return path;
    }
    throw new NoSuchElementException("No path found from " + start + " to " + dest);
  }


  @Override
  public String getGraphStats() {
    // TODO Auto-generated method stub
    return null;
  }

  public static void main(String[] args) throws IOException {
    // create instance of frontend
    Backend backend = new Backend();
    backend.readData("src/campus.dot");
  }
}
