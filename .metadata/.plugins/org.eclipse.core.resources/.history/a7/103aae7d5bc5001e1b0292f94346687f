import java.util.*;

public class GraphOrdering {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        int t = scanner.nextInt(); // Number of instances

        for (int i = 0; i < t; i++) {
            int n = scanner.nextInt(); // Number of nodes in the graph

            Map<String, List<String>> graph = new LinkedHashMap<>();

            // Reading the graph
            for (int j = 0; j < n; j++) {
                String node = scanner.next();
                List<String> neighbors = new ArrayList<>();

                while (scanner.hasNext()) {
                    String neighbor = scanner.next();
                    if (neighbor.equals("") || neighbor.equals(node)) {
                        break; // Stop reading neighbors when an empty string or the node itself is encountered
                    }
                    neighbors.add(neighbor);
                }

                graph.put(node, neighbors);
            }

            // Performing topological sorting based on tie-breaker priority
            List<String> result = topologicalSort(graph);

            // Printing the result
            for (String node : result) {
                System.out.print(node + " ");
            }
            System.out.println();
        }
    }

    private static List<String> topologicalSort(Map<String, List<String>> graph) {
        Set<String> visited = new HashSet<>();
        List<String> result = new ArrayList<>();

        for (String node : graph.keySet()) {
            if (!visited.contains(node)) {
                topologicalSortUtil(graph, node, visited, result);
            }
        }

        Collections.reverse(result);
        return result;
    }

    private static void topologicalSortUtil(Map<String, List<String>> graph, String node,
                                            Set<String> visited, List<String> result) {
        visited.add(node);

        List<String> neighbors = graph.getOrDefault(node, Collections.emptyList());
        for (String neighbor : neighbors) {
            if (!visited.contains(neighbor)) {
                topologicalSortUtil(graph, neighbor, visited, result);
            }
        }

        result.add(node);
    }
}
