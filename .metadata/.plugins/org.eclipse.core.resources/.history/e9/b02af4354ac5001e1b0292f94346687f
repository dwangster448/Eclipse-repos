import java.util.*;

public class thehw2 {
    public static int vertices;
    private LinkedList<Integer>[] adjacencyList;

    public thehw2(int vertices) {
        this.vertices = vertices;
        this.adjacencyList = new LinkedList[vertices];
        for (int i = 0; i < vertices; i++) {
            adjacencyList[i] = new LinkedList<>();
        }
    }

    public void addEdge(int source, int destination) {
        adjacencyList[source].add(destination);
    }

    public void DFS(int startVertex) {
        // Create a stack for DFS
        Stack<Integer> stack = new Stack<>();

        // Mark all vertices as not visited
        boolean[] visited = new boolean[vertices];

        // Push the current source node
        stack.push(startVertex);

        while (!stack.isEmpty()) {
            // Pop a vertex from stack and print it
            int currentVertex = stack.pop();
            if (!visited[currentVertex]) {
                System.out.print(currentVertex + " ");
                visited[currentVertex] = true;
            }

            // Get all adjacent vertices of the popped vertex
            // If the adjacent vertex is not visited, push it to the stack
            for (int neighbor : adjacencyList[currentVertex]) {
                if (!visited[neighbor]) {
                    stack.push(neighbor);
                }
            }
        }
    }

    public static void main(String[] args) {
        thehw2 graph = new thehw2(5);
        
        Scanner scanner = new Scanner(System.in);
        vertices = scanner.nextInt();

        if (scanner.hasNextInt()) {
          int nodes = vertices;
          vertices = scanner.nextInt();
          for (int i = 0; i < input; i++) {
            readData(input, scanner);
          }
        } else {
          for (int j = 0; j < input; j++) {
            String line = scanner.nextLine();
          }
        }
      

        graph.addEdge(0, 1);
        graph.addEdge(0, 2);
        graph.addEdge(1, 3);
        graph.addEdge(2, 4);

        System.out.println("DFS starting from vertex 0:");
        graph.DFS(0);
    }
}